Обработка JSON-файла
1. Файл с банковскими операциями размещен в директории data в корне проекта.
2. Создан модуль utils в пакете src.
3. Реализована функция чтения JSON-файла в модуле utils.
4. Функция чтения JSON-файла принимает путь к файлу JSON в качестве аргумента.
5. Функция чтения JSON-файла возвращает список словарей с данными о финансовых транзакциях.
6. Если JSON-файл пустой, содержит несписок или не найден, возвращается пустой список.

Операции по конвертации валюты
1. Реализована функция конвертации валюты из USD и EUR в рубли.
2. Функция конвертации валюты из USD и EUR в рубли принимает на вход словарь с данными о транзакции.
3. Функция конвертации валюты из USD и EUR в рубли возвращает сумму транзакции (ключ amount) в рублях, тип данных float.
4. Если транзакция была в USD или EUR, происходит обращение к внешнему API для получения текущего курса валют и конвертации суммы операции в рубли.

Сокрытие чувствительных данных
1. Ключи для авторизации в API конвертации валют скрыты в файле .env.
2. Собран шаблон файла .env с указанием названий всех переменных, необходимых для работы приложения.

Тестирование
1. Написаны тесты к новым функциональностям проекта.
2. Тесты для функций конвертации валюты и открытия JSON-файла используют Mock и patch.
3. Функциональный код покрыт тестами на 80% и больше.
4. При запуске тестов командой pytest все тесты завершаются успешно.

Оформление кода
1. При запуске линтера Flake8 выдается не более 5 ошибок.
2. Для всех реализованных функций написаны docstring.
3. Нейминг функций отвечает правилам оформления кода PEP8.
4. При вызове isort форматируется не более 1 импорта.

Задачи
Реализуйте функцию, которая принимает на вход путь до JSON-файла и возвращает список словарей с данными о финансовых
транзакциях. Если файл пустой, содержит не список или не найден, функция возвращает пустой список. Функцию поместите
в модуль utils.
Файл с данными о финансовых транзациях operations.json поместите в директорию data/ в корне проекта.
Ссылка на файл: operations.json.
Реализуйте функцию, которая принимает на вход транзакцию и возвращает сумму транзакции (amount) в рублях, тип данных —
float. Если транзакция была в USD или EUR, происходит обращение к внешнему API для получения текущего курса валют и
конвертации суммы операции в рубли. Для конвертации валюты воспользуйтесь Exchange Rates Data API:
https://apilayer.com/exchangerates_data-api. Функцию конвертации поместите в модуль external_api.
Используйте переменные окружения из файла .env для сокрытия чувствительных данных (токенов доступа для API).
Создайте шаблон файла .env и разместите в репозитории на GitHub.
Напишите тесты для новых функций, используйте Mock и patch.